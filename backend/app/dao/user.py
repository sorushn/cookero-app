from uuid import uuid4

from backend.app.core.db import get_session, driver
from backend.app.core.security import create_access_token, get_password_hash, verify_password, decode_jwt_token

class AuthDAO:
    """
    The constructor expects an instance of the Neo4j Driver, which will be
    used to interact with Neo4j.
    """
    def __init__(self, jwt_secret):
        self.jwt_token = jwt_secret

    """
    This method should create a new User node in the database with the email and name
    provided, along with an encrypted version of the password and a `userId` property
    generated by the server.

    The properties also be used to generate a JWT `token` which should be included
    with the returned user.
    """
    # tag::register[]
    def register(self, email: str, plain_password: str, name: str) -> dict:
        encrypted_password = get_password_hash(plain_password)
        payload = {
            "email": email,
            "name": name,
            "password": encrypted_password
        }
        payload["token"] = create_access_token(payload)

        driver.execute_query(
            """
            MERGE (u:User {email: $email})
            SET u.name = $name
            SET u.password = $password
            RETURN u
            """,
            email=payload["email"],
            name=payload["name"],
            password=payload["password"]
        )
        return payload
    # end::register[]
    
    """
    This method should attempt to find a user by the email address provided
    and attempt to verify the password.

    If a user is not found or the passwords do not match, a `false` value should
    be returned.  Otherwise, the users properties should be returned along with
    an encoded JWT token with a set of 'claims'.

    {
      userId: 'some-random-uuid',
      email: 'graphacademy@neo4j.com',
      name: 'GraphAcademy User',
      token: '...'
    }
    """
    # tag::authenticate[]
    def authenticate(self, email: str, plain_password: str) -> dict:
        try:
            records, summary, keys = driver.execute_query(
                """
                MATCH (u:User {email: $email}) RETURN u
                """,
                email=email,
            )
            if records:
                print(records)
                user = records[0]["u"]
                if not verify_password(plain_password, user["password"]):
                    return {"error": "Invalid email or password"}
                token = create_access_token({"sub": user["id"]})
                return {"token": token}
            else:
                return {"error": "Invalid email or password"}
        except Exception as e:
            return {"error": str(e)}
    # end::authenticate[]
